##########################################################################
# 
# Filename: Makefile.config 
#
# Purpose: 
# 	- Provides config target which generates a toolchain configuration 
# 	  file for tuxmason.
#
# Copyright (c) 2010 - 2012 Mwanguhya Daniel Murungi <tuxmason@gmail.com>
#
#########################################################################

# Absolute path configuration 
APP := tuxmason
RELEASE := 0.0.1-pre-alpha
TOPDIR := $(shell pwd)
TOP := $(shell dirname $(TOPDIR))
SRCDIR := $(TOPDIR)/sources
PATCHDIR := $(TOPDIR)/patches
PATCHDB := $(TOPDIR)/patchdb
SCRIPTSDIR := $(TOPDIR)/scripts
TCBUILDROOT := $(TOPDIR)/toolchain-build
PKGLOGDIR := "$(TCBUILDROOT)/build-logs"
TIMELOG := "$(PKGLOGDIR)/build-time.log"
MANDIR := $(TCBUILDROOT)/manpages
INFODIR := $(TCBUILDROOT)/infopages
DOCDIR := $(TCBUILDROOT)/docs
DATE := $(shell date -R)
CONF := $(TOPDIR)/conf/environment.mk

# Installation Directory
SYSROOTDIR := $(TOPDIR)/sysroot
CROSSTOOLS := $(TOPDIR)/cross-tools.arm
DESTDIR := $(SYSROOTDIR)

# Build Path
PATH := $(CROSSTOOLS)/bin:/usr/bin:/bin

# If vendor string is empty, set VENDOR to pc if architecture is x86 and unknown 
# if architecture is x86_64
ifeq ($(VENDOR),)
   ifeq ($(ARCH),$(filter $(ARCH),x86_64 arm))
     VENDOR := unknown
   else
     VENDOR := pc
   endif
endif

# set REVISION to "current date"-001 if revision string is empty
ifeq ($(REVISION),)
	REVISION := $(shell date +"%Y-%m-%d")-001
endif

# Use all CPU cores for the build process if user specifies automatic CPU core 
# discovery else, use one CPU core
ifeq ($(MULTICORE),auto)
	NPROCS := $(shell cat /proc/cpuinfo | grep processor | wc -l )
else
	NPROCS := 1
endif

# set target processor string
ifeq ($(ARCH),x86_64)
	TPROC := x86_64
else ifeq ($(ARCH),x86)
	TPROC := $(CPU_ARCH_TYPE)
else ifeq ($(ARCH),arm)
	TPROC := $(shell echo $(CPU_ARCH_TYPE) | sed -e 's/-//')
endif

# host tripplet
HOSTARCH := $(shell echo $$MACHTYPE | sed -e 's/-[^-]*/-cross/')

# build tripplet
BUILDARCH := $(HOSTARCH)

# set the target tripplet for the build process
ifeq ($(ARCH),x86_64)
	TARGETARCH := $(TPROC)-$(VENDOR)-linux-uclibc
else ifeq ($(ARCH),arm)
	TARGETARCH := $(TPROC)-$(VENDOR)-linux-uclibceabi
endif

base-dirs:
	@if [ ! -d $(TCBUILDROOT) ]; then mkdir -p $(TCBUILDROOT); fi
	@if [ ! -d $(SYSROOTDIR) ]; then mkdir -p $(SYSROOTDIR); fi
	@if [ ! -d $(CROSSTOOLS) ]; then mkdir -p $(CROSSTOOLS); fi
	@if [ ! -d $(PKGLOGDIR) ]; then mkdir -p $(PKGLOGDIR); fi

config: base-dirs
	@if [ -f $(CONF) ]; then echo "Run 'make clean' to remove existing configuration"; exit 1; fi
	@echo "ARCH := $(ARCH)" >> $(CONF)
	@echo "ARCH_TYPE := $(CPU_ARCH_TYPE)" >> $(CONF)
	@echo "TPROC := $(TPROC)" >> $(CONF)
	@echo "ABI := $(ABI)" >> $(CONF)
	@echo "ENDIAN := $(ENDIAN)" >> $(CONF)
	@echo "ARM_MODE := $(ARM_MODE)" >> $(CONF)
	@echo "FLOAT := $(FLOAT)" >> $(CONF)
	@echo "FPU := $(FPU)" >> $(CONF)
	@echo "VENDOR := $(VENDOR)" >> $(CONF)
	@echo "NPROCS := $(NPROCS)" >> $(CONF)
	@echo "REVISION := $(REVISION)" >> $(CONF)
	@echo "SYSROOTDIR := $(SYSROOTDIR)" >> $(CONF)
	@echo "DESTDIR := $(DESTDIR)" >> $(CONF)
	@echo "CROSSTOOLS := $(CROSSTOOLS)" >> $(CONF)
	@echo "TOP := $(TOP)" >> $(CONF)
	@echo "PATH := $(PATH)" >> $(CONF)
	@echo "TOPDIR := $(TOPDIR)" >> $(CONF)
	@echo "SRCDIR := $(SRCDIR)" >> $(CONF)
	@echo "PATCHDIR := $(PATCHDIR)" >> $(CONF)
	@echo "PATCHDB := $(PATCHDB)" >> $(CONF)
	@echo "SCRIPTSDIR := $(SCRIPTSDIR)" >> $(CONF)
	@echo "TCBUILDROOT := $(TCBUILDROOT)" >> $(CONF)
	@echo "PKGLOGDIR := $(PKGLOGDIR)" >> $(CONF)
	@echo "TIMELOG := $(TIMELOG)" >> $(CONF)
	@echo "MANDIR := $(MANDIR)" >> $(CONF)
	@echo "INFODIR := $(INFODIR)" >> $(CONF)
	@echo "DOCDIR := $(DOCDIR)" >> $(CONF)
	@echo "DATE := $(DATE)" >> $(CONF)
	@echo "TARGETARCH := $(TARGETARCH)" >> $(CONF)
	@echo "HOSTARCH := $(HOSTARCH)" >> $(CONF)
	@echo "BUILDARCH := $(BUILDARCH)" >> $(CONF)
